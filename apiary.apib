FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# MealPlans

This is a first version of API, related to recipe service project.

As example, this is few of similar project descriptions, that this API must cover:
* "No More To-Go website provides useful meal planning information through a combination of services, including: weekly menus, healthy recipes, integrated grocery shopping lists, cooking tips, specialty diets."
* "FIVE COMPLETE HEALTHY MENUS. Each Friday you will receive an email with the following week's menu, recipes, photos of each dish, and an organized grocery list. WEEKLY GROCERY LISTS. A printable detailed grocery list in your phone or tablet."

Basically, this services give you a weekly menu plan(list or recipes for each weekday).
Each recipe have similar web-recipe structure - image, description, directions, ingredients.
Combined in a weekly menu, this recipes can generate a grocery list, with all items, from selected recipes.



# Group Weekly Menu
admin version
Gluthen free
Diets
Allergies
Liked
Pantry
For kids
Favourites
Cooking for two / other custom meal plan
Recipe by weekday
Vegan

Short information
Custom
Get collections





Generate Meal Plan
Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
URL PARAMETERS

--------
diet
STRING

vegetarian
Enter a diet that the meal plan has to adhere to, e.g. "vegetarian", "vegan", "paleo" etc.
---------
exclude
STRING

shellfish, olives
A comma-separated list of allergens or ingredients that must be excluded.
----------
targetCalories
NUMBER

2000
What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
----------
timeFrame
STRING

day
Either for one 'day' or an entire 'week'.
---------

https://spoonacular-recipe-food-nutrition-v1.p.mashape.com/recipes/mealplans/generate

{
  "meals": [
    {
      "id": 49993,
      "title": "Cream Cheese Banana Nut Bread",
      "readyInMinutes": 90,
      "image": "cream-cheese-banana-nut-bread-2-49993.jpg",
      "imageUrls": [
        "cream-cheese-banana-nut-bread-2-49993.jpg",
        "cream_cheese_banana_nut_bread-49993.jpg"
      ]
    },
    {
      "id": 537176,
      "title": "Leftover Rice Casserole",
      "readyInMinutes": 45,
      "image": "leftover-rice-casserole-537176.jpg",
      "imageUrls": [
        "leftover-rice-casserole-537176.jpg"
      ]
    },
    {
      "id": 116679,
      "title": "Leek & Cheese Pie",
      "readyInMinutes": 75,
      "image": "leek-amp-cheese-pie-2-116679.jpg",
      "imageUrls": [
        "leek-amp-cheese-pie-2-116679.jpg",
        "leek_amp_cheese_pie-116679.jpg"
      ]
    }
  ],
  "nutrients": {
    "calories": 1988,
    "protein": 55.64,
    "fat": 121.19,
    "carbohydrates": 177.96
  }



### Sound interesting
https://market.mashape.com/spoonacular/recipe-food-nutrition#convert-amounts

but for later api stages

## like search we need






# Group Auth





# Group Recipe

### Retrieve Recipe [/authentication/{recipe_id}] 

+ Response 200 (application/json)

        [
            {
                "fav"         : "",
                "meal done"   : "",
                "full"        : "",
                "short"       : "",
                "ingredients" : "",
                "directions"  : "",
                "meta"        : "",
                "tags"        : "",
                "categories"  : "",
                "cuisines"    : "",
                "complex"     : "",
                "simple"      : "",
                "rating / rate"  : "",
                "change serving" : "",                
            }
        ]


### Retrieve Recipe  [GET]

+ Response 200 (application/json)

        [
            {
                "success"  : true,
                
            }
        ]

### Is Complex Recipe  [/recipe/{recipe_id}/is_complex]

+ Response 200 (application/json)

        [
            {
                "is_"  : true,
                
            }
        ]




### Update Recipe  [POST]  
+ /edit
+ Response 200 (application/json)

        [
            {
                "success"  : true,
                
            }
        ]



### Create Recipe  [POST] 
/add
+ Response 200 (application/json)

        [
            {
                "id"  : recipe_id,
                
            }
        ]





/recipeIdByWeekday - maybe this is belong more to weekly menu

/nutrition

/change image only

### Delete [DELETE]
+ /delete
+ Response 204

### Recipe Directions  [GET]
/directions

### Recipe Directions Complex  [GET]
/directions/complex

### Recipe Ingredients  [GET]
/ingredients

### Recipe Ingredients Categorized [GET]
/ingredients/categorized



Create a new recipe ingredient
Update a recipe ingredient
Retrieve a recipe ingredient
Retrieve all recipe ingredients
Delete a recipe ingredient



### Recipe Meta [GET]
/meta
+ Response 200 (application/json)

        [
            {
                "prep"    : "",
                "cook"    : "",
                "serving" : "",
                
            }
        ]




Copying and scaling a recipe
If you have an existing recipe that you want to copy or scale up, you can do that as well. 
Copying and scaling use the same endpoint - copying is just scaling by a factor of 1. 
Each recipe ingredient quantity will be scaled by the amount you specify (or default to 1), as will the recipe yield.
To maintain per serving nutrition data between the original and new recipes, recipe packages are scaled up as well. 
Recipe cost data will carry over as well.

POST https://recipal.com/api/v1/recipes/{RECIPE_ID}/scale

The ReciPal API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and to use HTTP status codes to indicate responses. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which can be understood by off-the-shelf HTTP clients. JSON will be returned in all responses from the API, including errors.
Interacting with the API should be straightforward with standard HTTP libraries, but let us know if you'd be interested in writing a language-specific client library. We'd be happy to facilitate that process.
If you ever have any questions, concerns, or run into errors please don't hesitate to contact us at info@recipal.com.











## Recipe Collection [/recipes]
### Create a recipe [POST]
Create a recipe resource and receive the CO₂-Value and Eaternity Award. Example of a full request with all fields used:
+ Request (application/json)
        {   
            "recipe": {
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    },
                    {
                        "language": "en",
                        "value": "Pumpkin Risotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        },
                        {
                            "language": "en",
                            "value": "Bake the carrot cake in the oven and enjoy as still hot."
                        }],
                "ingredients": [
                    {
                    "id": "100100191",
                    "type": "conceptual-ingredients",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        },
                        {
                            "language": "en",
                            "value": "Tomatoes"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic",  
                    "gtin": 00012345678905
                    },
                    {
                    "id": "100100894",
                    "type": "conceptual-ingredients",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        },
                        {
                            "language": "en",
                            "value": "Onions"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": "",  
                    "gtin": 00012345678906
                    }
                ]
            }
        }
+ Response 200 (application/json)
    + Headers
    
            Location: https://co2.eaternity.ch/api/recipes/d1ed2263-b1b2-4f50-9e9d-ba62cae81f29
            
    + Body
    
            {
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B"
                }   
            }
## Recipe [/recipes/{id}]
            
            
### Get Recipe [GET]
Get the up-to-date CO₂-Value for this recipe for the current date
+ Response 200 (application/json)
        {   
            "recipe": {
                "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                "co2-value": 765,
                "info-text": "Two ingredient origins have been estimated.",
                "eaternity-award": false,
                "rating": "B",
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    },
                    {
                        "language": "en",
                        "value": "Pumpkin Risotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                    {
                        "language": "de",
                        "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                    },
                    {
                        "language": "en",
                        "value": "Bake the carrot cake in the oven and enjoy as still hot."
                    }],
                "ingredients": [
                    {
                    "id": "100100191",
                    "type": "conceptual-ingredients",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        },
                        {
                            "language": "en",
                            "value": "Tomatoes"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic",  
                    "rating": "b",
                    "bar-chart": 31.00
                    },
                    {
                    "id": "100100894",
                    "type": "conceptual-ingredients",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        },
                        {
                            "language": "en",
                            "value": "Onions"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": "",  
                    "rating": "c",
                    "bar-chart": 69.00
                    }
                ]
            }
        }
### Update or create new recipe [PUT]
Update or create a certain recipe with this id. The whole recipe resource with all ingredients must be provided again. (PUT overrides the existing resource).
  
+ Request (application/json)
        {   
            "recipe": {
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        },
                        {
                            "language": "en",
                            "value": "Bake the carrot cake in the oven and enjoy as still hot."
                        }],
                "ingredients": [
                    {
                    "id": "100100191",
                    "type": "conceptual-ingredients",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"  
                    },
                    {
                    "id": "100100894",
                    "type": "conceptual-ingredients",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": ""
                    }
                ]
            }
        }
+ Response 200 (application/json)
            {
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B"
                }   
            }
            
            
### Delete the recipe [DELETE]
Deletes this recipe from the server
+ Response 204
## Kitchen Recipe Collection [/kitchens/{kitchen_id}/recipes]
No recipe location needs to be provided.
### Create a recipe [POST]
Create a recipe resource in a specific kitchen and receive the CO₂-Value and Eaternity Award 
+ Request (application/json)
        {   
            "recipe": {
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                    {
                        "language": "de",
                        "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                    },
                    {
                        "language": "en",
                        "value": "Bake the carrot cake in the oven and enjoy as still hot."
                    }],
                "ingredients": [
                    {
                    "id": "100100191",
                    "type": "conceptual-ingredients",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                    },
                    {
                    "id": "100100894",
                    "type": "conceptual-ingredients",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": ""
                    }
                ]
            }
        }
+ Response 200 (application/json)
ed
    + Headers
            Location: https://co2.eaternity.ch/api/kitchens/45674/recipes/d1ed2263-b1b2-4f50-9e9d-ba62cae81f29
    + Body
        
            {
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "kitchen-id": "45674",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B"
                }   
            }
            
            
### Get all recipes contained in this kitchen [GET]
A list of recipe ids is returned.
+ Response 200 (application/json)
        {
            "recipes": [ "298374","298345","298454","298345","298456","294564" ]
        }
## Kitchen Recipe [/kitchens/{kitchen_id}/recipes/{recipe_id}]
















##Recipe Properties
| Property | Type  | Description      | Required |
|:----------|:--------|:------------------|----------|
|kitchen-id|string|the id of the kitchen the recipe belongs to.|yes for the /recipes/batch resource|
|titles| list of language object| title of the recipe in different languages (array of language objects)|no|
|author|string|original author of the recipe|no|
|date|yyyy-mm-dd|the date the recipe is served. If **no date** is provided, **only a rating** of the recipe is returned.|best practice|
|location|string|location where the recipe is cooked. Address or country (arbitrary format) |yes if recipe is not provided in a kitchen|
|servings|int|for how many servings the ingredients are given. Required for the evaluation of the Eaternity Award.|yes for the Eaternity Award|
|instructions|list of language objects|cooking instructions for the recipe in different languages (array of language objects)|   no|
|ingredients|list of ingredients|a list of all ingredient resources in this recipe |yes|
|**Response**||||
|id|string|the id of the recipe. Either generated by Eaternity or supplied by the client through a PUT||
|co2-value|int|the CO₂-Value of the whole recipe per serving in [g CO₂e / serving]. If no date is provided, no CO₂-Value but only the rating is returned. If no servings are given, we assume 1 serving.||
|info-text| string | notes on the calculated recipe CO₂-value, e.g. remarks when properties like origin or transport are estimated||
|eaternity-award|boolean|true if the CO₂-Value of the recipe is climate friendly, false otherwise | |
|rating|string|the CO₂-recipe rating [A,B,C,D,E]. A is best, E is worst.| .|




















example


# Polls API Root [/]

This resource does not have any attributes. Instead it offers the initial API affordances.

## Retrieve the Entry Point [GET]

+ Response 200 (application/vnd.siren+json)

        {
            "links": [
                {
                    "rel": [ "questions" ],
                    "href": "/questions"
                }
            ]
        }

+ Response 200 (application/hal+json)

        {
            "_links": {
                "questions": { "href": "/questions" }
            }
        }

## Questions Collection [/questions{?page}]

+ Parameters
    + page: 1 (optional, number) - The page of questions to return

### List All Questions [GET]

+ Relation: questions

+ Response 200 (application/vnd.siren+json)

        {
            "actions": [
                {
                    "name": "add",
                    "href": "/questions",
                    "method": "POST",
                    "type": "application/json",
                    "fields": [
                        {
                            "name": "question"
                        }, {
                            "name": "choices"
                        }
                    ]
                }
            ],
            "links": [
                {
                  "rel": [ "next" ],
                  "href": "/questions?page=2"
                },
                {
                  "rel": [ "self" ],
                  "href": "/questions"
                }
            ],
            "entities": [
                {
                    "actions": [
                        {
                            "name": "delete",
                            "href": "/questions/1",
                            "method": "DELETE"
                        }
                    ],
                    "rel": [ "question" ],
                    "properties": {
                        "published_at": "2014-11-11T08:40:51.620Z",
                        "question": "Favourite programming language?"
                    },
                    "links": [
                        {
                            "rel": [ "self" ],
                            "href": "/questions/1"
                        }
                    ],
                    "entities": [
                        {
                            "actions": [
                                {
                                    "name": "vote",
                                    "href": "/questions/1/choices/1",
                                    "method": "POST"
                                }
                            ],
                            "rel": [ "choice" ],
                            "properties": {
                                "choice": "Swift",
                                "votes": 2048
                            },
                            "links": [
                                {
                                    "rel": [ "self" ],
                                    "href": "/questions/1/choices/1"
                                }
                            ]
                        }, {
                            "actions": [
                                {
                                    "name": "vote",
                                    "href": "/questions/1/choices/2",
                                    "method": "POST"
                                }
                            ],
                            "rel": [ "choice" ],
                            "properties": {
                                "choice": "Python",
                                "votes": 1024
                            },
                            "links": [
                                {
                                    "rel": [ "self" ],
                                    "href": "/questions/1/choices/2"
                                }
                            ]
                        }, {
                            "actions": [
                                {
                                    "name": "vote",
                                    "href": "/questions/1/choices/3",
                                    "method": "POST"
                                }
                            ],
                            "rel": [ "choice" ],
                            "properties": {
                                "choice": "Objective-C",
                                "votes": 512
                            },
                            "links": [
                                {
                                    "rel": [ "self" ],
                                    "href": "/questions/1/choices/3"
                                }
                            ]
                        }, {
                            "actions": [
                                {
                                    "name": "vote",
                                    "href": "/questions/1/choices/4",
                                    "method": "POST"
                                }
                            ],
                            "rel": [ "choice" ],
                            "properties": {
                                "choice": "Ruby",
                                "votes": 256
                            },
                            "links": [
                                {
                                    "rel": [ "self" ],
                                    "href": "/questions/1/choices/4"
                                }
                            ]
                        }
                    ]
                }
            ]
        }

+ Response 200 (application/hal+json)

        {
            "_links": {
                "self": { "href": "/questions" },
                "next": { "href": "/questions?page=2" }
            },
            "_embedded": {
                "question": [
                    {
                        "_links": {
                            "self": { "self": "/questions/1" }
                        },
                        "_embedded": {
                            "choice": [
                                {
                                    "_links": {
                                        "self": { "self": "/questions/1/choices/1" }
                                    },
                                    "choice": "Swift",
                                    "votes": 2048
                                }, {
                                    "_links": {
                                        "self": { "self": "/questions/1/choices/2" }
                                    },
                                    "choice": "Python",
                                    "votes": 1024
                                }, {
                                    "_links": {
                                        "self": { "self": "/questions/1/choices/3" }
                                    },
                                    "choice": "Objective-C",
                                    "votes": 512
                                }, {
                                    "_links": {
                                        "self": { "self": "/questions/1/choices/4" }
                                    },
                                    "choice": "Ruby",
                                    "votes": 256
                                }
                            ]
                        },
                        "question": "Favourite programming language?",
                        "published_at": "2014-11-11T08:40:51.620Z"
                    }
                ]
            }
        }

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON object containing a question and a collection of answers in the form of choices.

+ question (string) - The question
+ choices (array[string]) - A collection of choices.

+ Relation: create

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/vnd.siren+json)

        {
            "actions": [
                {
                    "name": "delete",
                    "href": "/questions/1",
                    "method": "DELETE"
                }
            ],
            "properties": {
                "published_at": "2014-11-11T08:40:51.620Z",
                "question": "Favourite programming language?"
            },
            "links": [
                {
                    "rel": [ "self" ],
                    "href": "/questions/1"
                }
            ],
            "entities": [
                {
                    "actions": [
                        {
                            "name": "vote",
                            "href": "/questions/1/choices/1",
                            "method": "POST"
                        }
                    ],
                    "rel": [ "choices" ],
                    "properties": {
                        "choice": "Swift",
                        "votes": 2048
                    },
                    "links": [
                        {
                            "rel": [ "self" ],
                            "href": "/questions/1/choices/1"
                        }
                    ]
                }, {
                    "actions": [
                        {
                            "name": "vote",
                            "href": "/questions/1/choices/2",
                            "method": "POST"
                        }
                    ],
                    "rel": [ "choices" ],
                    "properties": {
                        "choice": "Python",
                        "votes": 1024
                    },
                    "links": [
                        {
                            "rel": [ "self" ],
                            "href": "/questions/1/choices/2"
                        }
                    ]
                }, {
                    "actions": [
                        {
                            "name": "vote",
                            "href": "/questions/1/choices/3",
                            "method": "POST"
                        }
                    ],
                    "rel": [ "choices" ],
                    "properties": {
                        "choice": "Objective-C",
                        "votes": 512
                    },
                    "links": [
                        {
                            "rel": [ "self" ],
                            "href": "/questions/1/choices/3"
                        }
                    ]
                }, {
                    "actions": [
                        {
                            "name": "vote",
                            "href": "/questions/1/choices/4",
                            "method": "POST"
                        }
                    ],
                    "rel": [ "choices" ],
                    "properties": {
                        "choice": "Ruby",
                        "votes": 256
                    },
                    "links": [
                        {
                            "rel": [ "self" ],
                            "href": "/questions/1/choices/4"
                        }
                    ]
                }
            ]
        }

example













# Group Grocery List

## Directives
## All
## Add
## Edit
## Purchased
## Purchase
## Price
## How much spend now
## Previous purchased items  + edit prev



POST [/grocerylist/department]    Departmentalize a list of strings -- used for ad-hoc grocery list item addition
DELETE [/grocerylist]             Delete all the items on a grocery list; faster operation than a sync with deleted items.
GET [/grocerylist]                Get the user's grocery list. User is determined by Basic Authentication.
POST [/grocerylist/recipe]        Add a Recipe to the grocery list. In the request data, pass in recipeId, scale (scale=1.0 says to keep the recipe the same size as originally posted), markAsPending (true/false) to indicate that the lines in the recipe should be marked in a "pending" (unconfirmed by user) state.
POST [/grocerylist/sync]          Synchronize the grocery list. Call this with a POST to /grocerylist/sync
POST [/grocerylist/item]          Add a single line item to the grocery list
DELETE [/grocerylist/item/{guid}] [/grocerylist/item/{guid}] DELETE will delete this item assuming you own it.
PUT [/grocerylist/item/{guid}]    Update a grocery item by GUID




# Group Recipe Calendar

All data in recipe calendar are related to Grocery list, so maybe it will be better to move it on appropriate secion

Current week
Current
Previous week
Next week (is available)


# Group Expenses

Will be empty for alpha version of api

# Group Nutrition


# Group Food Tracking
Will be empty for alpha version of api

# Group Search
By Ingredient
By Name
By easy
By cousin

# Group Tips
Will be empty for alpha version of api

# Group Logs
Will be empty for alpha version of api

names for items
cup/cups/teaspoon

# Group User
profile
like/fav/meal done
purchase history

# Group Gift certificate
Will be empty for alpha version of api
Allowing user to pay for subscription but not
Might works as same as coupons, but with price going to 0.
Problem of gift certificate is that this account cannot be charged on 

# Group Checkout
Will be empty for alpha version of api
+ coupons

# Group Subscription
add / change
renewal
change credit card
freeze and unfreezing account
sub accounts allowed

This version is not allowing to manage ingredients.
Add recipes or manage them properly.
Its build for a purpose to show





/mealdone/:id
/add
/delete
/list  - return recipe ids only


favorite
/add
/:id
/delete
/list  - return recipe ids only


weekly menu
 /recipe/edit
 /recipe/delete
 /recipe/add



getRecipe - json array with one recipe
getDirections
getIngredients
getCategorizedIngredients

Meta:
prep
cook
serving
mealDone
favorites
getMeta


isComplexRecipe - это 
getRecipeId by weekday



MealDone:
/add
/remove
/all - return recipe ids

/current week -  return recipe ids 

/previous week - return recipe ids 

all weeks - return recipe ids


get recipes per week


menu/ingredients/categories/yes
menu/ingredients/categories/no - or menu/ingredients/

menu/ingredients/category/all - get all ingredients from weeklymenu, separated by categories
menu/ingredients/category/id - get list of ingredients from one category (Note: without callculation

menu/ingredients/category/id/compress - get list of ingredients from one category calculated


/v0/ingredients
/v0/ingredients/{INGREDIENT_ID}
/v0/recipes
/v0/recipes/{RECIPE_ID}
/v0/recipes/{RECIPE_ID}/scale
/v0/recipes/shortcut
/v0/recipes/{RECIPE_ID}/recipe_ingredients
/v0/recipes/{RECIPE_ID}/recipe_ingredients/{RECIPE_INGREDIENT_ID}




GL / ing / cat / id / - get list of ingredients from one category with statuses 'purchased', 'to buy'

menu/ingredients/category/all/raw 



## Authentification [/authentication]
## Login [/login]

X-MealPlan-App-ID: app-id
X-MealPlan-App-Key: app-key




[{
    "success" : false,
    "message" : "Authentification failed"
}]

[{
    success: true,
    message: 'Enjoy your token!',
    token: token
}]

Status 303
[{ 
    success: false, 
    message: 'No token provided.' 
}]


Stealed from BigOven API

Authentication Process
SSL is now required for all requests to the BigOven API. So precede your requested endpoint with "https://api2.bigoven.com"

Pass your API Key with Every Request
You'll be passing your API key, issued to you when you're approved to use the API, with every request, as the parameter api_key, or if you'd prefer, via the request header with a key named "X-BigOven-API-Key".

In addition, if you'd like to do things at the BigOven.com user level, like see your favorites or post a review on behalf of a user, you'll need to pass authentication information for that BigOven user. That's different than your api_key; it's an encoded version of the user account information that you'll need to put in the request header.

The authentication process for this user-level part of the BigOven API is based on the HTTP Basic Access Authentication method defined by RFC 1945 (Hypertext Transfer Protocol – HTTP/1.0).

Required Steps
Every API call that requires user level permissions must be made with a correctly set HTTP “Authorization” header. This header presents the user’s credentials to the api.bigoven.com server in Base64 format which can then be decoded by BigOven for verification. 

The following template demonstrates the process of generating the Authorization header for a given username and password combination. This simple example, taken from RFC 1945, considers a username “Aladdin” with the password “open sesame”.

"Step" "Field" "Value"
1 Username "Aladdin"
2 Password "open sesame"
3 Combined String "Alladin:open sesame"
4 Base64 Encoded Combined "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
5 Authorization header "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
    


A complete sample request would then take the form
GET /private/index.html HTTP/1.0
Host: localhost
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
Fortunately for the API Client, most languages make both Base64 encoding and setting the Authorization header on a request a trivial process.
Pass Authentication Information using the Authorization Request Header
It is worth noting that not every API call requires the Authorization header to be set. BigOven public data may be requested without user credentials.

Generally, you'll want to pass authentication information to api2.bigoven.com whenever you're doing something on the user's behalf, like posting a review, or fetching the profile of the currently logged in user. General operations, like searching recipes, don't require user-level authentication. Remember that the user information you're passing isn't your user information as a developer, it's that of the user, which you collect in a login dialog and then Base64-it as above to pass to BigOven.com for authentication.

## Images

Stealed from Big Oven API
You can easily generate a square image size for any photo simply by appending the parameters h and w, such as:

Url Size
"https://photos.bigoven.com/recipe/hero/avocado-tomato-salad-534a1f.jpg" "full"
"https://photos.bigoven.com/recipe/hero/avocado-tomato-salad-534a1f.jpg?h=64&w=64" "64px by 64px square"
"https://photos.bigoven.com/recipe/hero/avocado-tomato-salad-534a1f.jpg?h=128&w=128" "128px by 128px square"

## Error Codes

400 – Bad Request
409 – API Rate Limit Exceeded
500 – Internal Server Error


## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }