FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# MealPlans

This is a first version of API, related to recipe service project.

As example, this is few of similar project descriptions, that this API must cover:
* "No More To-Go website provides useful meal planning information through a combination of services, including: weekly menus, healthy recipes, integrated grocery shopping lists, cooking tips, specialty diets."
* "FIVE COMPLETE HEALTHY MENUS. Each Friday you will receive an email with the following week's menu, recipes, photos of each dish, and an organized grocery list. WEEKLY GROCERY LISTS. A printable detailed grocery list in your phone or tablet."

Basically, this services give you a weekly menu plan(list or recipes for each weekday).
Each recipe have similar web-recipe structure - image, description, directions, ingredients.
Combined in a weekly menu, this recipes can generate a grocery list, with all items, from selected recipes.



# Group Weekly Menu
admin version
Gluthen free
Diets
Allergies
Liked
Pantry
For kids
Favourites
Cooking for two / other custom meal plan
Recipe by weekday
Vegan

Short information
Custom
Get collections


# Group Auth





# Group Recipe

### Retrieve Recipe [/authentication/{recipe_id}] 

+ Response 200 (application/json)

        [
            {
                "fav"         : "",
                "meal done"   : "",
                "full"        : "",
                "short"       : "",
                "ingredients" : "",
                "directions"  : "",
                "meta"        : "",
                "tags"        : "",
                "categories"  : "",
                "cuisines"    : "",
                "complex"     : "",
                "simple"      : "",
                "rating / rate"  : "",
                "change serving" : "",                
            }
        ]


### Retrieve Recipe  [GET]

+ Response 200 (application/json)

        [
            {
                "success"  : true,
                
            }
        ]

### Is Complex Recipe  [/recipe/{recipe_id}/is_complex]

+ Response 200 (application/json)

        [
            {
                "is_"  : true,
                
            }
        ]




### Update Recipe  [POST]  
+ /edit
+ Response 200 (application/json)

        [
            {
                "success"  : true,
                
            }
        ]



### Create Recipe  [POST] 
/add
+ Response 200 (application/json)

        [
            {
                "id"  : recipe_id,
                
            }
        ]





/recipeIdByWeekday - maybe this is belong more to weekly menu

/nutrition

/change image only

### Delete [DELETE]
+ /delete
+ Response 204

### Recipe Directions  [GET]
/directions

### Recipe Directions Complex  [GET]
/directions/complex

### Recipe Ingredients  [GET]
/ingredients

### Recipe Ingredients Categorized [GET]
/ingredients/categorized



### Recipe Meta [GET]
/meta
+ Response 200 (application/json)

        [
            {
                "prep"    : "",
                "cook"    : "",
                "serving" : "",
                
            }
        ]










# Group Grocery List

## Directives
## All
## Add
## Edit
## Purchased
## Purchase
## Price
## How much spend now
## Previous purchased items  + edit prev

# Group Recipe Calendar

All data in recipe calendar are related to Grocery list, so maybe it will be better to move it on appropriate secion

Current week
Current
Previous week
Next week (is available)


# Group Expenses

Will be empty for alpha version of api

# Group Nutrition


# Group Food Tracking
Will be empty for alpha version of api

# Group Search
By Ingredient
By Name
By easy
By cousin

# Group Tips
Will be empty for alpha version of api

# Group Logs
Will be empty for alpha version of api

names for items
cup/cups/teaspoon

# Group User
profile
like/fav/meal done
purchase history

# Group Gift certificate
Will be empty for alpha version of api
Allowing user to pay for subscription but not
Might works as same as coupons, but with price going to 0.
Problem of gift certificate is that this account cannot be charged on 

# Group Checkout
Will be empty for alpha version of api
+ coupons

# Group Subscription
add / change
renewal
change credit card
freeze and unfreezing account
sub accounts allowed

This version is not allowing to manage ingredients.
Add recipes or manage them properly.
Its build for a purpose to show





/mealdone/:id
/add
/delete
/list  - return recipe ids only


favorite
/add
/:id
/delete
/list  - return recipe ids only


weekly menu
 /recipe/edit
 /recipe/delete
 /recipe/add



getRecipe - json array with one recipe
getDirections
getIngredients
getCategorizedIngredients

Meta:
prep
cook
serving
mealDone
favorites
getMeta


isComplexRecipe - это 
getRecipeId by weekday



MealDone:
/add
/remove
/all - return recipe ids

/current week -  return recipe ids 

/previous week - return recipe ids 

all weeks - return recipe ids


get recipes per week


menu/ingredients/categories/yes
menu/ingredients/categories/no - or menu/ingredients/

menu/ingredients/category/all - get all ingredients from weeklymenu, separated by categories
menu/ingredients/category/id - get list of ingredients from one category (Note: without callculation

menu/ingredients/category/id/compress - get list of ingredients from one category calculated

GL / ing / cat / id / - get list of ingredients from one category with statuses 'purchased', 'to buy'

menu/ingredients/category/all/raw 



## Authentification [/authentication]
## Login [/login]

X-MealPlan-App-ID: app-id
X-MealPlan-App-Key: app-key




[{
    "success" : false,
    "message" : "Authentification failed"
}]

[{
    success: true,
    message: 'Enjoy your token!',
    token: token
}]

Status 303
[{ 
    success: false, 
    message: 'No token provided.' 
}]


Stealed from BigOven API

Authentication Process
SSL is now required for all requests to the BigOven API. So precede your requested endpoint with "https://api2.bigoven.com"

Pass your API Key with Every Request
You'll be passing your API key, issued to you when you're approved to use the API, with every request, as the parameter api_key, or if you'd prefer, via the request header with a key named "X-BigOven-API-Key".

In addition, if you'd like to do things at the BigOven.com user level, like see your favorites or post a review on behalf of a user, you'll need to pass authentication information for that BigOven user. That's different than your api_key; it's an encoded version of the user account information that you'll need to put in the request header.

The authentication process for this user-level part of the BigOven API is based on the HTTP Basic Access Authentication method defined by RFC 1945 (Hypertext Transfer Protocol – HTTP/1.0).

Required Steps
Every API call that requires user level permissions must be made with a correctly set HTTP “Authorization” header. This header presents the user’s credentials to the api.bigoven.com server in Base64 format which can then be decoded by BigOven for verification. 

The following template demonstrates the process of generating the Authorization header for a given username and password combination. This simple example, taken from RFC 1945, considers a username “Aladdin” with the password “open sesame”.

"Step" "Field" "Value"
1 Username "Aladdin"
2 Password "open sesame"
3 Combined String "Alladin:open sesame"
4 Base64 Encoded Combined "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
5 Authorization header "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
    


A complete sample request would then take the form
GET /private/index.html HTTP/1.0
Host: localhost
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
Fortunately for the API Client, most languages make both Base64 encoding and setting the Authorization header on a request a trivial process.
Pass Authentication Information using the Authorization Request Header
It is worth noting that not every API call requires the Authorization header to be set. BigOven public data may be requested without user credentials.

Generally, you'll want to pass authentication information to api2.bigoven.com whenever you're doing something on the user's behalf, like posting a review, or fetching the profile of the currently logged in user. General operations, like searching recipes, don't require user-level authentication. Remember that the user information you're passing isn't your user information as a developer, it's that of the user, which you collect in a login dialog and then Base64-it as above to pass to BigOven.com for authentication.

## Images

Stealed from Big Oven API
You can easily generate a square image size for any photo simply by appending the parameters h and w, such as:

Url Size
"https://photos.bigoven.com/recipe/hero/avocado-tomato-salad-534a1f.jpg" "full"
"https://photos.bigoven.com/recipe/hero/avocado-tomato-salad-534a1f.jpg?h=64&w=64" "64px by 64px square"
"https://photos.bigoven.com/recipe/hero/avocado-tomato-salad-534a1f.jpg?h=128&w=128" "128px by 128px square"

## Error Codes

400 – Bad Request
409 – API Rate Limit Exceeded
500 – Internal Server Error


## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }